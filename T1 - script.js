//CREAMOS UNA INSTANCIA DE LA APLICACIÓN WEB
//LOS DOS PARÉNTESIS DEL FINAL INICIALIZAN LA APLICACIÓN
var app = require('express')();

//CREAMOS UN SERVIDOR PARA LA APLICACIÓN
var server = require('http').createServer(app);

//PONEMOS A ESCUCHAR EL MÓDULO SOCKET.IO EN EL SERVIDOR
//SI PONEMOS {LOG:FALSE} COMO SEGUNDO PARÁMETRO DE LA FUNCIÓN LISTEN
//NO NOS MUESTRA POR LA TERMINAL LA INFORMACIÓN DEL DEBUG

var io = require('socket.io').listen(server);
//var io = require('socket.io').listen(server,{log:false});


//ARRANCAMOS EL SERVIDOR ESCUCHANDO EN EL PUERTO 8080
server.listen(8080);

//ESTABLECEMOS UNA RESPUESTA PARA LAS PETICIONES QUE NOS LLEGUEN
//EL PARÁMETRO __DIRNAME SELECCIONA LA RUTA RELATIVA DONDE EJECUTAMOS
//ESTE MISMO ARCHIVO, Y /INDEX.HTML LA PÁGINA QUE ENVIAREMOS A 
//CADA CONEXIÓN
app.get('/', function(req,res){

	res.sendfile(__dirname+'/index.html');

});

// -------------------------------------------------------------
// MANEJO DE EVENTOS
// -------------------------------------------------------------


//PARA HACER DEBUG O SEGUIR LA TRAMA DE EJECUCIÓN UTILIZAMOS LA FUNCIÓN
//CONSOLE.LOG('CADENA DE TEXTO'), QUE NOS MUESTRA POR CONSOLA 
//UNA CADENA DE TEXTO



//SIEMPRE QUE SE ESTABLEZCA UNA CONEXIÓN, SE EJECUTARÁ ESTA FUNCIÓN SOBRE
//LA MISMA, Y SERÁ DONDE ESCRIBAMOS LOS MANEJADORES O FUNCIONES
io.sockets.on('connection',function(socket){

	//EVENTOS AQUÍ

	//SIEMPRE QUE SE ESTABLEZCA UNA CONEXIÓN, SE MOSTRARÁ POR CONSOLA
	//LA CADENA 'HELLO WORLD'
	console.log('----------------HELLO WORLD----------------');

	//SOBRE LA VARIABLE SOCKET, ASIGNAMOS FUNCIONES QUE SE EJECUTARÁN, 
	//SIEMPRE QUE HAYA ALGUNA REFERENCIA DESDE EL CLIENTE A SU NOMBRE,
	//MEDIANTE EL MÉTODO 'ON'
	//POR EJEMPLO, SI EN EL CLIENTE SE EJECUTA UNA FUNCIÓN CUYO NOMBRE
	//SEA 'MUESTRA', SE EJECUTARÁ LA FUNCIÓN PASADA COMO PARÁMETRO
	socket.on('Muestra',function(data){
		console.log(data);		
	});
	
	//IGUAL QUE EL CLIENTE LLAMA A FUNCIONES DEL SERVIDOR, EL SERVIDOR
	//TAMBIEN PUEDE LLAMAR A FUNCIONES DEL CLIENTE
	//ESTO SE REALIZA CON EL MÉTODO 'EMIT'
	socket.emit('nombreDeFunción', 'parametros...');




	//SI QUISIÉRAMOS LLAMAR A UNA FUNCIÓN, TAL Y COMO HEMOS HECHO 
	//MÁS ARRIBA, PERO PARA TODOS LOS SOCKETS O CONEXIONES ESTABLECIDAS,
	//LA FORMA DE HACERLO SERÍA ASÍ:
	io.sockets.emit('nombreDeFuncion','parametros...');

	//SI EN CAMBIO, QUERÉMOS QUE LA RECIBAN TODOS LOS CLIENTES EN EL 
	//DOMINIO DE BROADCAST DE LA CONEXIÓN ACTIVA (VEASE, TODAS MENOS LA 
	//QUE DISPARA LA FUNCIÓN) ES ASÍ:
	socket.broadcast.emit('nombreDeFuncion','parametros...');


	//EJEMPLO: QUEREMOS QUE EL SERVIDOR MUESTRE POR CONSOLA LA CADENA
	//'SE HA PULSADO UN BOTÓN' SIEMPRE QUE SE PULSE EL BOTON CON 
	//ID='BOTON2' DEL CLIENTE

	//1º ESCRIBIMOS UN MANEJADOR EN EL SERVIDOR (ESTE DOCUMENTO):

	socket.on('muestraCadena',function(cadenaAMostrar){
		console.log(cadenaAMostrar);
	});

	//2º NECESITAMOS QUE ESTA FUNCIÓN SEA DISPARADA POR ALGUNA OTRA
	//EN LA PARTE DEL CLIENTE --> ESCRIBIMOS UNA FUNCIÓN EN 'INDEX.HTML'
	//Y LA ASIGNAMOS AL BOTON CON ID='BOTON2' 
	//(1) **botonPulsado(cadena)**

	//3º AHORA, UNA VEZ SE PULSE EL BOTÓN EN EL CLIENTE, SE NOTIFICARÁ
	//EN EL SERVIDOR


	//OPCIONAL1: ¿ERES CAPAZ DE LLAMAR A UNA FUNCIÓN EQUIVALENTE EN
	//EL LADO DEL CLIENTE, DESDE DENTRO DE LA FUNCIÓN 'MUESTRACADENA'
	//DEL SERVIDOR? ¿QUE PASOS SERIAN NECESARIOS PARA LOGRARLO?


	//OPCIONAL2: ¿ERES CAPAZ DE HACER QUE UNA CONEXIÓN COMUNIQUE, A TODAS
	//LAS CONEXIONES ESTABLECIDAS MENOS ELLA, QUE HA PULSADO UN BOTÓN? 
	//¿QUE PASOS SERIAN NECESARIOS PARA LOGRARLO?
	//¿Y PARA QUE LO RECIBAN ABSOLUTAMENTE TODAS (ELLA MISMA INCLUIDA)?

});